@page "{post}"
@using Hydro
@model UzlezzBlogs.Pages.PostModel
@{
    ViewData["Title"] = Model.Details.Title;

    bool upvoted = Model.Details.Rating == true;
    bool downvoted = Model.Details.Rating == false;
}

@if (Model.ClearLocalStorage == 1)
{
    <script>
        localStorage.removeItem('draftMarkdown');
        window.location = "/post/@Model.Details.Url";
    </script>
}
else
{

@section AdditionalMeta {
    <meta name="description" content="@Model.Details.Description">
    <meta name="author" content="@Model.Details.User">
}

<div class="container py-5" style="max-width: 800px;">
    <h1 class="mb-3" style="color: #343a40;">@Model.Details.Title</h1>

    <div class="d-flex justify-content-between align-items-center mb-2 text-muted small">
        <div class="d-flex align-items-center">
            <span class="me-2">Posted by</span>

            <a href="/profile/@Model.Details.User"
               class="d-flex align-items-center text-decoration-none me-2"
               style="cursor: pointer;">
                <img src="/avatar/@Model.Details.User"
                     alt="avatar"
                     class="rounded-circle me-2"
                     style="width: 32px; height: 32px; object-fit: cover;" />
                <span class="author-name">@Model.Details.User</span>
            </a>

            <span>on <span class="utc-date-only" data-utc="@Model.Details.CreatedDate.ToString("o")"></span></span>
        </div>
    </div>

    <hr />

    <div class="d-flex justify-content-between text-muted small mt-2">
        <div>
            @if (HttpContext.IsAuthorized())
            {
                @await Html.Hydro("RatingComponent", new {
                    PostId = Model.Details.Id,
                    Rating = Model.Details.Rating,
                    Upvotes = Model.Details.Upvotes,
                    Downvotes = Model.Details.Downvotes
                })
            }
            else
            {
                <a href="/login?returnUrl=@Request.Path"
                    class="text-decoration-none text-muted" style="cursor: pointer">
                    <i class="bi bi-hand-thumbs-up" style="color:currentColor;font-size:1.2rem"></i>
                    @Model.Details.Upvotes
                    <i class="bi bi-hand-thumbs-down" style="color:currentColor;font-size:1.2rem"></i>
                    @Model.Details.Downvotes
                </a>
            }
        </div>

        <div class="d-flex align-items-center">
            @if (HttpContext.IsAuthorized() && HttpContext.GetUser()!.Name == Model.Details.User)
            {
                <a href="/edit/@Model.Details.Id"
                   class="btn btn-sm btn-outline-secondary me-2">
                    Edit
                </a>
            }

            <i class="bi bi-eye" style="color:currentColor;font-size:1.2rem"></i>
            <span id="view-count">@Model.Details.Views</span>
        </div>
    </div>

    <div class="mt-4 justified-content markdown-body">
        @Html.Raw(Model.Details.HtmlContent)
    </div>

    <hr class="mt-5" />

    @if (HttpContext.IsAuthorized())
    {
        <form id="commentForm" class="mt-4">
            @Html.AntiForgeryToken()
            <div class="mb-3 d-flex flex-column">
                <label for="commentContent" class="form-label">Your Comment</label>
                <textarea class="form-control mb-2" id="commentContent" rows="3" required></textarea>
                <button type="submit" class="btn btn-primary align-self-end">Post Comment</button>
            </div>
        </form>
    }
    else
    {
        <p>
            <a href="/login?returnUrl=@Request.Path">Log in</a> to comment.
        </p>
    }

    <h3 class="mb-4">Comments (<span id="commentCount">@Model.Details.CommentCount</span>)</h3>

    <div id="commentList">
        @* TODO: Stream comments as user scrolls *@
        @foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedDate))
        {
            <div class="d-flex mb-0">
                <img src="/avatar/@comment.User"
                     alt="avatar"
                     class="rounded-circle me-3 comment-avatar"
                     style="width: 48px; height: 48px; object-fit: cover;"
                     profile="/profile/@comment.User" />

                <div class="flex-grow-1">
                    <div class="d-flex justify-content-between align-items-center">
                        <strong>@comment.User</strong>
                        <small class="text-muted"><span class="utc-date" data-utc="@comment.CreatedDate.ToString("o")"></span></small>
                    </div>
                    <div class="mt-1 mb-0 justified-content markdown-body" style="white-space: pre-wrap;">@Html.Raw(comment.Text)</div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
                document.querySelectorAll(".comment-avatar").forEach((el) => {
                    el.addEventListener("click", () => {
                        const profile = el.getAttribute("profile");
                        if (profile) window.location.href = profile;
                    });
                });
            });
    </script>
    @if (HttpContext.IsAuthorized())
    {
        <script>
            const postId = "@Model.Details.Id";
        </script>
        <script src="~/js/details.js" asp-append-version="true"></script>
    }
}
}